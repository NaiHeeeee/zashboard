name: Sync Latest Release   # 工作流名称：同步最新发布

on:
  schedule:
    - cron: '0 * * * *'     # 定时触发：每小时整点运行
  workflow_dispatch:        # 手动触发：允许在 GitHub 界面手动运行

permissions:
  contents: write           # 权限设置：授予对仓库内容的写权限，用于推送更改

jobs:
  sync:                     # 任务名称：同步
    runs-on: ubuntu-latest  # 运行环境：使用最新的 Ubuntu 系统
    env:                    # 环境变量定义
      NO_UPDATE: false      # 是否无需更新，默认 false
      RELEASE_TAG: ''       # 最新版本标签，初始为空
      DOWNLOAD_URL: ''      # 下载地址，初始为空
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # 步骤：检出代码库，使用最新 v4 版本
        
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        # 步骤：安装 jq 工具，用于解析 JSON，确保环境一致性
        
      - name: Fetch latest release info
        id: release
        run: |
          # 步骤：获取最新发布信息
          # 使用 GitHub API 获取 Zephyruso/zashboard 的最新 release 数据
          RELEASE_INFO=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/Zephyruso/zashboard/releases/latest)
          # 提取版本标签并存入环境变量
          echo "RELEASE_TAG=$(echo "$RELEASE_INFO" | jq -r .tag_name)" >> "$GITHUB_ENV"
          # 提取 dist.zip 的下载地址并存入环境变量
          echo "DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name=="dist.zip") | .browser_download_url')" >> "$GITHUB_ENV"
          # 检查版本标签是否成功获取，若为空则报错退出
          [ -n "${{ env.RELEASE_TAG }}" ] || { echo "错误：无法获取版本标签"; exit 1; }
          
      - name: Check for updates
        id: check_version
        run: |
          # 步骤：检查是否有更新
          # 如果 README.md 不存在或没有版本标记，初始化一个默认版本
          if [ ! -f README.md ] || ! grep -q "<!-- RELEASE_TAG -->" README.md; then
            echo "当前版本: <!-- RELEASE_TAG -->v0.0.0<!-- /RELEASE_TAG -->" > README.md
          fi
          # 提取 README 中的上一个版本号
          LAST_VERSION=$(sed -n 's/.*<!-- RELEASE_TAG -->\(.*\)<!-- \/RELEASE_TAG -->/\1/p' README.md)
          # 输出对比信息，便于调试
          echo "上一个版本: $LAST_VERSION"
          echo "最新版本: ${{ env.RELEASE_TAG }}"
          # 如果版本未变，设置 NO_UPDATE 为 true
          [ "$LAST_VERSION" != "${{ env.RELEASE_TAG }}" ] || echo "NO_UPDATE=true" >> "$GITHUB_ENV"
          
      - name: Backup README
        if: env.NO_UPDATE != 'true'  # 条件：仅在需要更新时执行
        uses: actions/upload-artifact@v4
        with:
          name: readme-backup        # artifact 名称
          path: README.md            # 备份文件路径
          retention-days: 1          # 保留时间：1天，节省存储空间
        # 步骤：备份 README 文件，避免后续清理时丢失
        
      - name: Sync new release
        if: env.NO_UPDATE != 'true'  # 条件：仅在需要更新时执行
        run: |
          # 步骤：同步新版本
          # 下载最新的 dist.zip 文件，若失败则报错
          curl -L -o dist.zip "${{ env.DOWNLOAD_URL }}" || { echo "下载失败"; exit 1; }
          # 解压到临时目录 temp_dist，-q 参数减少输出，若失败则报错
          unzip -q dist.zip -d temp_dist || { echo "解压失败"; exit 1; }
          
          # 清理现有文件，保留 README.md 和 .github 目录
          find . -maxdepth 1 -type f -not -name "README.md" -not -name ".git*" -delete
          find . -maxdepth 1 -type d -not -name ".*" -not -name "temp_dist" -not -name ".github" -exec rm -rf {} +
          
          # 将新文件移动到根目录并清理临时文件
          mv temp_dist/dist/* . && rm -rf temp_dist dist.zip

      - name: Restore README
        if: env.NO_UPDATE != 'true'  # 条件：仅在需要更新时执行
        uses: actions/download-artifact@v4
        with:
          name: readme-backup        # 下载之前备份的 README
        # 步骤：恢复原始 README 文件到工作目录
        
      - name: Update README version
        if: env.NO_UPDATE != 'true'  # 条件：仅在需要更新时执行
        run: |
          # 步骤：更新 README 中的版本信息
          # 替换版本标签
          sed -i "s|<!-- RELEASE_TAG -->v[0-9.]*<!-- /RELEASE_TAG -->|<!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->|" README.md
          # 替换版本链接
          sed -i "s|\[<!-- RELEASE_TAG -->v[0-9.]*<!-- /RELEASE_TAG -->\](https://github.com/Zephyruso/zashboard/releases)|\[<!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->](https://github.com/Zephyruso/zashboard/releases)|" README.md
          
      - name: Commit changes
        if: env.NO_UPDATE != 'true'  # 条件：仅在需要更新时执行
        run: |
          # 步骤：提交更改
          # 配置 Git 用户信息
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          # 添加所有更改
          git add .
          # 提交更改，若无更改则输出提示
          git commit -m "同步版本 ${{ env.RELEASE_TAG }}" || echo "无更改需要提交"
          # 推送到远程仓库
          git push