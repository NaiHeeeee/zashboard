name: Sync Latest Release

on:
  schedule:
    - cron: '0 * * * *'   # 每小时运行一次
  workflow_dispatch:      # 允许手动触发
  push:                   # 在推送时触发
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      NEED_UPDATE: "false"
      RELEASE_TAG: ""
      DOWNLOAD_URL: ""
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便正确处理分支
        
      - name: Get latest release info
        id: release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/Zephyruso/zashboard/releases/latest)
          echo "RELEASE_TAG=$(echo $RELEASE_INFO | jq -r .tag_name)" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name=="dist.zip") | .browser_download_url')" >> $GITHUB_ENV
          echo "最新版本: ${{ env.RELEASE_TAG }}"
          echo "下载地址: ${{ env.DOWNLOAD_URL }}"

      - name: Check last processed version
        id: check_version
        run: |
          # 检查上一次处理的版本号
          if grep -q "<!-- RELEASE_TAG -->" README.md; then
            LAST_VERSION=$(grep -o '<!-- RELEASE_TAG -->[^<]*' README.md | sed 's/<!-- RELEASE_TAG -->//g')
            echo "提取到的版本号: $LAST_VERSION"
          else
            LAST_VERSION="未找到版本标记"
            echo "README.md 中未找到版本标记，将视为需要更新"
          fi
          
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
          
          # 设置更新标志（使用纯版本号比较）
          if [ "$LAST_VERSION" != "${{ env.RELEASE_TAG }}" ]; then
            echo "NEED_UPDATE=true" >> $GITHUB_ENV
            echo "发现新版本 ${{ env.RELEASE_TAG }}，需要更新（当前版本: $LAST_VERSION）"
          else
            echo "NEED_UPDATE=false" >> $GITHUB_ENV
            echo "当前版本 $LAST_VERSION 已是最新，无需更新"
          fi
          
      - name: Download and process release
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        run: |
          echo "开始下载和处理发布包..."
          # 下载最新发布包
          curl -L "${{ env.DOWNLOAD_URL }}" -o original_dist.zip || { echo "::error::下载失败"; exit 1; }
          
          # 创建临时处理目录
          mkdir -p temp_extract
          mkdir -p processed_dist
          
          # 解压原始dist.zip
          unzip -q original_dist.zip -d temp_extract || { echo "::error::解压失败"; exit 1; }
          
          # 检查解压后的目录结构
          if [ -d "temp_extract/dist" ]; then
            SOURCE_DIR="temp_extract/dist"
          else
            SOURCE_DIR="temp_extract"
          fi
          
          # 检查并删除CNAME文件（如果存在）
          if [ -f "$SOURCE_DIR/CNAME" ]; then
            echo "移除CNAME文件"
            rm "$SOURCE_DIR/CNAME"
          else
            echo "CNAME文件不存在，无需删除"
          fi
          
          # 复制处理后的文件到processed_dist目录
          cp -r "$SOURCE_DIR/"* processed_dist/
          
          # 重新打包为新的zip文件
          cd processed_dist
          zip -r ../zashboard.zip ./* || { echo "::error::打包失败"; exit 1; }
          cd ..
          
          # 确保zip文件存在
          if [ -f "zashboard.zip" ]; then
            echo "zashboard.zip 文件大小: $(du -h zashboard.zip | cut -f1)"
          else
            echo "::error::打包后的文件不存在"
            exit 1
          fi
      
      - name: Create new release
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ env.RELEASE_TAG }}"
          name: "${{ env.RELEASE_TAG }}"
          body: |
            此版本基于原始 ${{ env.RELEASE_TAG }} 发布，已移除CNAME文件。
            
            原始发布：https://github.com/Zephyruso/zashboard/releases/tag/${{ env.RELEASE_TAG }}
            
            更新时间：${{ github.event.repository.updated_at }}
          files: zashboard.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Clean existing files
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        run: |
          echo "清理现有文件..."
          # 创建需要保留的文件列表
          cat > preserve.txt << EOF
          .git/
          .github/
          README.md
          preserve.txt
          zashboard.zip
          .
          ..
          EOF
          
          # 删除除保留文件以外的文件和目录
          find . -maxdepth 1 -not -path "." -not -path ".." | grep -v -f preserve.txt | xargs rm -rf
          
      - name: Move files to root
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        run: |
          echo "移动文件到根目录..."
          # 将处理后的文件移动到仓库根目录
          cp -r processed_dist/* .
          
          # 清理临时文件和目录
          rm -rf temp_extract processed_dist original_dist.zip
          
      - name: Update version in README
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        run: |
          echo "更新README中的版本信息..."
          # 检查README.md是否包含版本标记
          if grep -q "<!-- RELEASE_TAG -->" README.md; then
            # 更新已存在的版本标记
            sed -i "s|<!-- RELEASE_TAG -->[^<]*<!-- /RELEASE_TAG -->|<!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->|g" README.md
            sed -i "s|\[<!-- RELEASE_TAG -->[^<]*<!-- /RELEASE_TAG -->\](https://github.com/Zephyruso/zashboard/releases)|[<!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->](https://github.com/Zephyruso/zashboard/releases)|g" README.md
          else
            # 如果不存在版本标记，则添加版本信息到README.md顶部
            echo -e "# Zashboard <!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->\n\n$(cat README.md)" > README.md
          fi
          
      - name: Prepare and push to main
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        run: |
          echo "准备提交到main分支..."
          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 删除 zashboard.zip 和 preserve.txt
          rm -f zashboard.zip preserve.txt
          
          # 添加所有更改
          git add -A
          
          # 提交并推送至 main 分支
          git commit -m "Sync latest release ${{ env.RELEASE_TAG }}" || echo "No changes to commit"
          git push origin HEAD:main
          
      - name: Prepare and push to gh-pages
        if: env.NEED_UPDATE == 'true'   # 仅在需要更新时执行
        run: |
          echo "准备提交到gh-pages分支..."
          # 切换到 gh-pages 分支
          git checkout -B gh-pages

          # 删除 .github 文件夹
          rm -rf .github

          # CNAME 处理 - 为 gh-pages 分支创建空 CNAME 文件而非删除
          touch CNAME

          # 添加更改
          git add -A

          # 提交并推送至 gh-pages 分支
          git commit -m "Sync latest release ${{ env.RELEASE_TAG }}" || echo "No changes to commit"
          git push origin gh-pages --force