name: Sync Latest Release   # 同步最新发布

on:
  schedule:
    - cron: '0 * * * *'  # 每小时运行一次
  workflow_dispatch:      # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest    # 在最新的 Ubuntu 虚拟机环境中运行
    env:                      # 定义环境变量
      NO_UPDATE: false        # 是否需要更新的标志
      RELEASE_TAG: ''         # 最新版本的标签
      DOWNLOAD_URL: ''        # 最新版本的下载链接
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3        # 检出当前仓库代码
        
      - name: Get latest release info
        id: release
        run: |
          # 获取最新发布信息
          RELEASE_INFO=$(curl -s https://api.github.com/repos/Zephyruso/zashboard/releases/latest)
          echo "RELEASE_TAG=$(echo $RELEASE_INFO | jq -r .tag_name)" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name=="dist.zip") | .browser_download_url')" >> $GITHUB_ENV
          
      - name: Check last processed version
        id: check_version
        run: |
          # 检查上一次处理的版本
          if [ ! -f README.md ] || ! grep -q "<!-- RELEASE_TAG -->" README.md; then
            echo "当前版本: <!-- RELEASE_TAG -->v0.0.0<!-- /RELEASE_TAG -->" >> README.md
          fi
          LAST_VERSION=$(sed -n 's/.*<!-- RELEASE_TAG -->\(.*\)<!-- \/RELEASE_TAG -->/\1/p' README.md)
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
          if [ "$LAST_VERSION" == "${{ env.RELEASE_TAG }}" ]; then
            echo "NO_UPDATE=true" >> $GITHUB_ENV
          fi
          
      - name: Download and extract release
        if: env.NO_UPDATE != 'true'   # 仅在需要更新时执行
        run: |
          # 下载并解压最新发布包
          curl -L "${{ env.DOWNLOAD_URL }}" -o dist.zip
          mkdir -p temp_dist
          unzip dist.zip -d temp_dist
          
      - name: Clean existing files
        if: env.NO_UPDATE != 'true'   # 仅在需要更新时执行
        run: |
          # 创建需要保留的文件列表
          echo ".github/" > preserve.txt
          echo "README.md" >> preserve.txt
          
          # 删除除保留文件以外的文件和目录
          find . -maxdepth 1 -type f -not -name "README.md" -not -name ".github" -not -name "preserve.txt" -delete
          find . -maxdepth 1 -type d -not -name ".*" -not -name "temp_dist" -not -name ".github" -exec rm -rf {} +
          
          # 清理临时文件
          rm -f preserve.txt
          
      - name: Move files to root
        if: env.NO_UPDATE != 'true'   # 仅在需要更新时执行
        run: |
          # 将解压目录中的文件移动到仓库根目录
          mv temp_dist/dist/* .
          rm -rf temp_dist
          
      - name: Update version in README
        if: env.NO_UPDATE != 'true'   # 仅在需要更新时执行
        run: |
          # 更新 README.md 中的版本信息
          sed -i "s|<!-- RELEASE_TAG -->v[0-9.]*<!-- /RELEASE_TAG -->|<!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->|" README.md
          sed -i "s|\[<!-- RELEASE_TAG -->v[0-9.]*<!-- /RELEASE_TAG -->\](https://github.com/Zephyruso/zashboard/releases)|[<!-- RELEASE_TAG -->${{ env.RELEASE_TAG }}<!-- /RELEASE_TAG -->](https://github.com/Zephyruso/zashboard/releases)|" README.md

      - name: Prepare and push to main branch
        if: env.NO_UPDATE != 'true'   # 仅在需要更新时执行
        run: |
          # 配置 Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 切换到 main 分支
          git checkout main
          
          # 删除 CNAME 文件（如果存在）
          if [ -f CNAME ]; then
            rm CNAME
            git add CNAME
          fi
          
          # 添加所有更改并提交
          git add -A
          git commit -m "Sync latest release ${{ env.RELEASE_TAG }} to main (without CNAME)"
          git push origin main

      - name: Prepare and push to gh-pages branch
        if: env.NO_UPDATE != 'true'   # 仅在需要更新时执行
        run: |
          # 配置 Git（重复配置以确保环境正确）
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 切换到 gh-pages 分支（如果不存在则创建）
          git checkout gh-pages || git checkout -b gh-pages
          
          # 清理 gh-pages 分支中的旧文件（保留 .git 和当前工作文件）
          find . -maxdepth 1 -not -name "." -not -name ".." -not -name ".git" -exec rm -rf {} +
          
          # 将 main 分支的最新文件复制过来
          git checkout main -- .
          
          # 修改 CNAME 文件内容（修改为需要部署GitHub pages的域名）
          echo "zashboard.naihe.us.kg" > CNAME
          
          # 添加所有更改并提交
          git add -A
          git commit -m "Sync latest release ${{ env.RELEASE_TAG }} to gh-pages (with updated CNAME)"
          
          # 推送更改到 gh-pages 分支
          git push origin gh-pages --force